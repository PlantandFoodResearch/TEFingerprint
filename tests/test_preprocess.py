#! /usr/bin/env python
import os
import pytest
import subprocess
from tefingerprint import preprocess


@pytest.mark.parametrize('query,answer',
                         [('AGATC', 'GATCT'),
                          ('aGtcn', 'NGACT')])
def test_reverse_complement(query, answer):
    assert preprocess.reverse_complement(query) == answer


def test_parse_sam_string():
    query = 'read008\t0\tchr1\t2784\t60\t58M\t*\t0\t0\tCAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTACTATTTCTTGGT\t2222222222222222222222222222222222222222222222222222222222'
    answer = {'QNAME': 'read008',
              'FLAG': '0',
              'RNAME': 'chr1',
              'POS': '2784',
              'MAPQ': '60',
              'CIGAR': '58M',
              'RNEXT': '*',
              'PNEXT': '0',
              'TLEN': '0',
              'SEQ': 'CAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTACTATTTCTTGGT',
              'QUAL': '2222222222222222222222222222222222222222222222222222222222'}
    assert preprocess.parse_sam_string(query) == answer


def test_foward_danglers_as_fastq():
    query = ['read007\t0\tchr1\t2779\t60\t63M\t*\t0\t0\tTCCGGCAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTTCTTTATCTTGGT\t222222222222222222222222222222222222222222222222222222222222222',
             'read008\t0\tchr1\t2784\t60\t58M\t*\t0\t0\tCAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTACTATTTCTTGGT\t2222222222222222222222222222222222222222222222222222222222',
             'read009\t0\tchr1\t2796\t60\t46M\t*\t0\t0\tATAAGTTTTCTTTCATTTTTTTATAATTGTTTTTCTTTTTCTTGGT\t2222222222222222222222222222222222222222222222']

    answer = ["@read007\nTCCGGCAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTTCTTTATCTTGGT\n+\n222222222222222222222222222222222222222222222222222222222222222",
              "@read008\nCAAGCACCTTTCATAAGTTTTCTTTCATTTTTTTATAATTGTTTTACTATTTCTTGGT\n+\n2222222222222222222222222222222222222222222222222222222222",
              "@read009\nATAAGTTTTCTTTCATTTTTTTATAATTGTTTTTCTTTTTCTTGGT\n+\n2222222222222222222222222222222222222222222222"]

    assert preprocess.forward_danglers_as_fastq(query) == answer


def test_reverse_danglers_as_fastq():
    query = ['read015\t16\tchr1\t3217\t60\t100M\t*\t0\t0\tTCTCCTTATTTAGTAGAGACTCGTTTTTAAAGATTTAGAGGGATGTTATAGTCTTTTACCGTACTTTCCCAATAGATAACATGAACCTCAGATTCGACTT\t1112222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222',
             'read016\t16\tchr1\t3226\t60\t100M\t*\t0\t0\tTTAGTAGAGACTCGTTTTTAAAGATTTAGAGGGATGTTATAGTCTTTTACCGTACTTTCCCAATAGATAACTTGAACCTCAGATTCGACTTGGATTTTCC\t2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222',
             'read017\t16\tchr1\t3246\t60\t100M\t*\t0\t0\tAAGATTTAGAGGGATGTTATAGTCTTTTACCGTACTTTCCCAATAGATAACATGAACCTCAGATTCGACTTTGATTTTCCACGTATTGTTTTTTCCAAGT\t2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222'
]

    answer = ["@read015\nAAGTCGAATCTGAGGTTCATGTTATCTATTGGGAAAGTACGGTAAAAGACTATAACATCCCTCTAAATCTTTAAAAACGAGTCTCTACTAAATAAGGAGA\n+\n2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222111",
              "@read016\nGGAAAATCCAAGTCGAATCTGAGGTTCAAGTTATCTATTGGGAAAGTACGGTAAAAGACTATAACATCCCTCTAAATCTTTAAAAACGAGTCTCTACTAA\n+\n2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
              "@read017\nACTTGGAAAAAACAATACGTGGAAAATCAAAGTCGAATCTGAGGTTCATGTTATCTATTGGGAAAGTACGGTAAAAGACTATAACATCCCTCTAAATCTT\n+\n2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"]

    assert preprocess.reverse_danglers_as_fastq(query) == answer
