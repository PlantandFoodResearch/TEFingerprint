#! /usr/bin/env python3

import sys
import argparse
from tefingerprint._applications.fingerprint import fingerprint
from tefingerprint.util.io import zopen


def main():
    parser = argparse.ArgumentParser('Identify potential repeat element '
                                     'flanking regions.')
    parser.add_argument('bams',
                        nargs='+',
                        help='A single bam file to be fingerprinted or '
                             'multiple bam files for a comparative '
                             'fingerprint.')
    parser.add_argument('-a', '--annotation-of-known-elements',
                        type=str,
                        nargs=1,
                        default=[None],
                        help='an optional annotation of known '
                             'repeat elements in gff (3) format for matching '
                             'to identified insertions. '
                             'Known elements are also used for joining paris '
                             'of clusters either side of an insertion. '
                             'Known elements are also used for joining pairs '
                             'of clusters either side of an insertion. '
                             'This gff file may be compressed with gzip '
                             'or bz2. '
                             'Default = None.')
    parser.add_argument('-r', '--references',
                        type=str,
                        nargs='*',
                        default=[None],
                        help='The reference sequence(s) (e.g. chromosomes) to '
                             'be fingerprinted. '
                             'If left blank (None) all references sequences '
                             'in the  input file will be used. '
                             'Default = None.')
    parser.add_argument('-f', '--families',
                        type=str,
                        nargs='*',
                        default=[''],
                        help='Repeat element/transposon categories to be '
                             'used. These must be exact string match\'s to '
                             'start of read name and are used to split '
                             'reads into categories for analysis. Not '
                             'specifying at least one valid category will '
                             'result in empty output files. '
                             'Default = None.')
    parser.add_argument('-q', '--mapping-quality',
                        type=int,
                        nargs=1,
                        default=[30],
                        help='Minimum allowed mapping quality for informative '
                             'reads mapped to the reference genome. '
                             'Default = 30.')
    parser.add_argument('-m', '--minimum-reads',
                        type=int,
                        default=[10],
                        nargs=1,
                        help='Minimum number of read tips required to form a '
                             'cluster. '
                             'Default = 10.')
    parser.add_argument('-e', '--epsilon',
                        type=int,
                        default=[250],
                        nargs=1,
                        help='The maximum allowable distance among a set of '
                             'read tips required to form a cluster. This '
                             'should be approximately equal to the insert '
                             'size of paired reads. '
                             'Default = 250.')
    parser.add_argument('--minimum-epsilon',
                        type=int,
                        default=[0],
                        nargs=1,
                        help='Minimum epsilon values used when calculating '
                             'support for clusters. '
                             'This is only used in hierarchical clustering '
                             'and should usually be left as 0. '
                             'Default = 0.')
    parser.add_argument('-s', '--splitting-method',
                        type=str,
                        default=['conservative'],
                        nargs=1,
                        help='Method used for splitting proximate '
                             'clusters. One of "none", "aggressive" or '
                             '"conservative". See the full documentation'
                             'for details. '
                             'Default = "conservative".')
    parser.add_argument('-n', '--number-of-common-elements',
                        type=int,
                        default=[3],
                        nargs=1,
                        help='The number of most common repeat elements '
                             'contributing to each cluster that are '
                             'counted. '
                             'Default = 3')
    parser.add_argument('-b', '--buffer-fingerprints',
                        type=int,
                        default=[25],
                        nargs=1,
                        help='Additional buffer to be added to margins '
                             'of fingerprints. '
                             'This is used avoid identifying small '
                             'clusters as unique, when there is only '
                             'slight miss-match in read positions across '
                             'samples (i.e. false positives). It also '
                             'improves the robustness of comparisons by '
                             'allowing more reads to be included in each bin. '
                             'The buffer is trimmed back to the extent of the '
                             'furthermost read tips it contains. '
                             'Default = 25.')
    parser.add_argument('-j', '--join-distance',
                        type=int,
                        default=[25],
                        nargs=1,
                        help='Used to try and match clusters of informative '
                             'reads to a known repeat-element (if provided) '
                             'as well as joining pairs of clusters at '
                             'either end of a repeat insertion. '
                             'This represents the maximum distance to search '
                             'for a known repeat from the end of each '
                             'cluster. If no know repeat is present (or none '
                             'are provided) then clusters will be paired if '
                             'they are within twice this distance of one '
                             'another. '
                             'Default = 25.')
    parser.set_defaults(colourise_output=True)
    parser.add_argument('--no-colour',
                        dest='colourise_output',
                        action='store_false',
                        help='Switch to disable colour coding of gff output. '
                             'This may improve performance')
    parser.add_argument('-t', '--threads',
                        type=int,
                        default=[1],
                        nargs=1,
                        help='Maximum number of cpu threads to be used. '
                             'The maximum number of threads that can be '
                             'utilised is the number of reference molecules '
                             'to be fingerprinted. '
                             'Default = 1.')
    parser.add_argument('--mate-element-tag',
                        type=str,
                        default=['ME'],
                        nargs=1,
                        help='Sam-tag used in bam file to indicate the '
                             'repeat element matched to each the mate read. '
                             'Default = "ME".')
    parser.add_argument('--tsv',
                        type=str,
                        default=[False],
                        nargs=1,
                        help='File name for CSV output. '
                             'Compression will be applied by extension '
                             'e.g. ".gz" or ".bz2". '
                             'Output may be written to standard output '
                             'using "-". '
                             'Default = None.')
    parser.add_argument('--csv',
                        type=str,
                        default=[False],
                        nargs=1,
                        help='File name for CSV output. '
                             'Compression will be applied by extension '
                             'e.g. ".gz" or ".bz2". '
                             'Output may be written to standard output '
                             'using "-". '
                             'Default = None.')
    parser.add_argument('--gff',
                        type=str,
                        default=[False],
                        nargs=1,
                        help='File name for GFF output. '
                             'Compression will be applied by extension '
                             'e.g. ".gz" or ".bz2". '
                             'Output may be written to standard output '
                             'using "-". '
                             'Default = None.')
    args = parser.parse_args(sys.argv[1:])

    result = fingerprint(bams=args.bams,
                         references=args.references,
                         categories=args.families,
                         quality=args.mapping_quality[0],
                         transposon_tag=args.mate_element_tag[0],
                         minimum_reads=args.minimum_reads[0],
                         epsilon=args.epsilon[0],
                         minimum_epsilon=args.minimum_epsilon[0],
                         n_common_elements=args.number_of_common_elements[0],
                         splitting_method=args.splitting_method[0],
                         fingerprint_buffer=args.buffer_fingerprints[0],
                         join_distance=args.join_distance[0],
                         annotation=args.annotation_of_known_elements[0],
                         colourise_output=args.colourise_output,
                         cores=args.threads[0])

    # TSV output
    tsv = args.tsv[0]
    if tsv == '-':
        for line in result.as_tabular_lines(sep='\t'):
            print(line)
    elif tsv:
        with zopen(tsv, 'wb') as f:
            for line in result.as_tabular_lines(sep='\t'):
                f.write(line.encode() + b'\n')
    else:
        pass

    # CSV output
    csv = args.csv[0]
    if csv == '-':
        for line in result.as_tabular_lines(sep=',', quote=True):
            print(line)
    elif csv:
        with zopen(csv, 'wb') as f:
            for line in result.as_tabular_lines(sep=',', quote=True):
                f.write(line.encode() + b'\n')
    else:
        pass

    # GFF output
    gff = args.gff[0]
    if gff == '-':
        for line in result.as_gff_lines(order=['reference',
                                               'start',
                                               'stop',
                                               'category']):
            print(line)
    elif gff:
        with zopen(gff, 'wb') as f:
            for line in result.as_gff_lines(order=['reference',
                                                   'start',
                                                   'stop',
                                                   'category']):
                f.write(line.encode() + b'\n')
    else:
        pass


if __name__ == '__main__':
    main()
