#! /usr/bin/env python

import sys
import argparse
from tefingerprint.fingerprint import fingerprint
from tefingerprint.compression import zopen


def main():
    parser = argparse.ArgumentParser('Identify potential TE flanking '
                                     'regions.')
    parser.add_argument('bams',
                        nargs='+',
                        help='A list of two or more bam files to '
                             'fingerprint.')
    parser.add_argument('-a', '--annotation-of-known-elements',
                        type=str,
                        nargs=1,
                        default=[None],
                        help='Optional annotation of known elements in '
                             'gff format for matching to identified '
                             'insertions. '
                             'Known elements are also used for joining '
                             'paris of clusters either side of an insertion.')
    parser.add_argument('-r', '--references',
                        type=str,
                        nargs='*',
                        default=[None],
                        help='The reference sequence(s) (e.g. chromosome) to '
                             'be fingerprinted. '
                             'If left blank all references sequences in the '
                             'input file will be used.')
    parser.add_argument('-f', '--families',
                        type=str,
                        nargs='*',
                        default=[''],
                        help='TE categories to be used. '
                             'These must be exact string match\'s to start '
                             'of read name and are used to split '
                             'reads into categories for analysis.')
    parser.add_argument('-q', '--mapping-quality',
                        type=int,
                        nargs=1,
                        default=[30],
                        help='Minimum mapping quality of reads.')
    parser.add_argument('-m', '--minimum-reads',
                        type=int,
                        default=[10],
                        nargs=1,
                        help='Minimum number of read tips required to be '
                             'considered a cluster.')
    parser.add_argument('-e', '--epsilon',
                        type=int,
                        default=[250],
                        nargs=1,
                        help='The maximum allowable distance among a set of '
                             'read tips to be considered a cluster.')
    parser.add_argument('--minimum-epsilon',
                        type=int,
                        default=[0],
                        nargs=1,
                        help='Minimum epsilon values used when calculating '
                             'support for clusters. '
                             'This is only used in hierarchical clustering '
                             'and should usually be left '
                             'as the default value of 0.')
    parser.set_defaults(hierarchical_clustering=True)
    parser.add_argument('--non-hierarchical',
                        dest='hierarchical_clustering',
                        action='store_false',
                        help='Use non-hierarchical clustering.')
    parser.add_argument('-n', '--number-of-common-elements',
                        type=int,
                        default=[3],
                        nargs=1,
                        help='The number of most common elements '
                             'contributing to each cluster that are '
                             'counted.')
    parser.add_argument('-b', '--buffer-fingerprints',
                        type=int,
                        default=[0],
                        nargs=1,
                        help='Additional buffer to be added to margins '
                             'of fingerprints. '
                             'This is used avoid identifying small '
                             'clusters as unique, when these is only '
                             'slight miss-match in read positions across '
                             'samples (i.e. false positives).')
    parser.add_argument('-j', '--join-distance',
                        type=int,
                        default=[0],
                        nargs=1,
                        help='Used to try and match clusters of informative '
                             'reads to a known transposon (if provided) '
                             'as well as joining pairs of clusters at '
                             'either end of a transposon insertion. '
                             'This represents the maximum distance to search '
                             'for a known transposon and half the maximum '
                             'distance to search for a paired cluster if '
                             'no a known transposon is identified.')
    parser.add_argument('-t', '--threads',
                        type=int,
                        default=[1],
                        nargs=1,
                        help='Maximum number of cpu threads to be used.')
    parser.add_argument('--mate-element-tag',
                        type=str,
                        default=['ME'],
                        nargs=1,
                        help='Tag used in bam file to indicate the element '
                             'type of the mate read.')
    parser.add_argument('--csv',
                        type=str,
                        default=[False],
                        nargs=1,
                        help='File name for CSV output. '
                             'Output may be written to standard output '
                             'using "-".')
    parser.add_argument('--gff',
                        type=str,
                        default=[False],
                        nargs=1,
                        help='File name for GFF output. '
                             'Output may be written to standard output '
                             'using "-".')
    args = parser.parse_args(sys.argv[1:])

    result = fingerprint(bams=args.bams,
                         references=args.references,
                         categories=args.families,
                         quality=args.mapping_quality[0],
                         transposon_tag=args.mate_element_tag[0],
                         minimum_reads=args.minimum_reads[0],
                         epsilon=args.epsilon[0],
                         minimum_epsilon=args.minimum_epsilon[0],
                         n_common_elements=args.number_of_common_elements[0],
                         hierarchical=args.hierarchical_clustering,
                         fingerprint_buffer=args.buffer_fingerprints[0],
                         join_distance=args.join_distance[0],
                         annotation=args.annotation_of_known_elements[0],
                         cores=args.threads[0])

    # CSV output
    csv = args.csv[0]
    if csv == '-':
        for line in result.as_tabular_lines():
            print(line)
    elif csv:
        with zopen(csv, 'wb') as f:
            for line in result.as_tabular_lines():
                f.write(line.encode() + b'\n')
    else:
        pass

    # GFF output
    gff = args.gff[0]
    if gff == '-':
        for line in result.as_gff_lines(order=['reference',
                                               'start',
                                               'stop',
                                               'category']):
            print(line)
    elif gff:
        with zopen(gff, 'wb') as f:
            for line in result.as_gff_lines(order=['reference',
                                                   'start',
                                                   'stop',
                                                   'category']):
                f.write(line.encode() + b'\n')
    else:
        pass


if __name__ == '__main__':
    main()
