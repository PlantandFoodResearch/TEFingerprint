#! /usr/bin/env python3

import sys
import argparse
from tefingerprint import _filter_gff
from tefingerprint.util.io import zopen


def main():
    parser = argparse.ArgumentParser('Identify potential TE '
                                     'flanking regions')
    parser.add_argument('gff',
                        nargs=1,
                        help='A single gff file to be filtered')
    parser.add_argument('--all',
                        nargs='*',
                        help=('filters to apply to apply in the "all" '
                              'context. These should take the form '
                              '"<column><operator><value>".'),
                        default=[])
    parser.add_argument('--any',
                        nargs='*',
                        help=('filters to apply to apply in the "any" '
                              'context. These should take the form '
                              '"<column><operator><value>".'),
                        default=[])
    parser.add_argument('-o', '--output',
                        nargs=1,
                        help='A output file to write to. '
                             'Compression will be applied by extension '
                             'e.g. ".gz" or ".bz2". '
                             'The default option ("-") writes lines to '
                             'standard out.',
                        default=['-'])
    args = parser.parse_args(sys.argv[1:])

    all_filters = [_filter_gff.parse_filter_string(string)
                   for string in args.all]
    any_filters = [_filter_gff.parse_filter_string(string)
                   for string in args.any]

    input_gff = args.gff[0]
    if input_gff == '-':
        input_lines = (line for line in sys.stdin)
    else:
        infile = zopen(input_gff, 'rb')
        input_lines = (line.decode() for line in infile)

    output_lines = filter_features(input_lines, all_filters, any_filters)

    output = args.output[0]
    if output == '-':
        for line in output_lines:
            print(line.strip())
    else:
        with zopen(output, 'wb') as outfile:
            for line in output_lines:
                outfile.write(line.strip().encode() + b'\n')

    if input_gff != '-':
        infile.close()


def filter_features(lines, all_filters, any_filters):
    for line in lines:
        feature = _filter_gff.parse_feature(line)
        if all_filters:
            all_true = _filter_gff.apply_filters(feature,
                                                 all_filters,
                                                 'ALL')
        else:
            all_true = True

        if any_filters:
            any_true = _filter_gff.apply_filters(feature,
                                                 any_filters,
                                                 'ANY')
        else:
            any_true = True

        if all_true and any_true:
            yield line


if __name__ == '__main__':
    main()
